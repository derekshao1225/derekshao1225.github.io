<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://derekshao1225.github.io/</id>
    <title>Derek</title>
    <updated>2021-12-18T05:35:14.990Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://derekshao1225.github.io/"/>
    <link rel="self" href="https://derekshao1225.github.io/atom.xml"/>
    <subtitle>Derek&apos;s technical life</subtitle>
    <logo>https://derekshao1225.github.io/images/avatar.png</logo>
    <icon>https://derekshao1225.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, Derek</rights>
    <entry>
        <title type="html"><![CDATA[进程与线程]]></title>
        <id>https://derekshao1225.github.io/post/jin-cheng-yu-xian-cheng/</id>
        <link href="https://derekshao1225.github.io/post/jin-cheng-yu-xian-cheng/">
        </link>
        <updated>2021-12-16T01:23:52.000Z</updated>
        <content type="html"><![CDATA[<p>进程：是指一个内存中运行的应用程序，每个进程都有一个独立的内存空间<br>
线程：是进程中的一个执行路径，共享一个内存空间，线程之间可以自由切换，并发执行; 一个进程最少有一个线程，线程实际上是在进程基础之上的进一步划分，一个进程启动之后，里面的若干执行路径又可以划分成若干个线程<br>
Java中每个线程独立拥有一个Stack内存，所有线程公用一个Heap内存</p>
<p>线程调度<br>
分时调度：所有线程轮流使用 CPU 的使用权，平均分配每个线程占用 CPU 的时间<br>
抢占式调度：优先让优先级高的线程使用 CPU，如果线程的优先级相同，那么会随机选择一个(线程随机性)，Java使用的为抢占式调度<br>
CPU使用抢占式调度模式在多个线程间进行着高速的切换。对于CPU的一个核新而言，某个时刻， 只能执行一个线程，而 CPU的在多个线程间切换速度相对我们的感觉要快，看上去就是在同一时刻运行。 其实，多线程程序并不能提高程序的运行速度，但能够提高程序运行效率，让CPU的使用率更高</p>
<p>同步: 排队执行 , 效率低但是安全<br>
异步: 同时执行 , 效率高但是数据不安全<br>
并发:指两个或多个事件在同一个时间段内发生<br>
并行:指两个或多个事件在同一时刻发生(同时发生)</p>
<p>Runnable接口：</p>
<ol>
<li>public class MyRunnable implements Runnable, 重写run( )方法中的线程任务</li>
<li>在main( )中创建a. 任务对象MyRunnable r = new MyRunnable( ); b. 创建一个线程并给其分配任务Thread t = new Thread( r ); c. 执行线程 t.start();</li>
<li>实现Runnable接口 vs 继承Thread优势： a. 避免Java单继承带来的局限性 b. 任务和线程本身分离 c.线程池技术接受Runnable类型的任务</li>
</ol>
<p>线程阻塞：所有额外耗时的操作都可能导致线程阻塞，比如IO的交互</p>
<p>线程休眠：Thread.sleep( long millis); 线程类的静态方法，在休眠调用的时候会检查当前线程是否携带了中断标记，如果有就会出现InterruptedException e, 进入catch块由程序员决定是否让当前线程死亡（杀死线程：直接return;）</p>
<p>线程中断：线程是否应该结束应该由其自身决定，强制杀死线程会导致内存空间释放异常，内存空间永久占用等问题；合理的中断方法是对于一个线程t1调用t1.interrupt( ); 给t1线程打上中断标记，在t1线程运行的某些时刻.sleep( )/.wait( )/.notify( )调用的时候会检查自身是否携带了中断标记，如果有就会出现InterruptedException e, 进入catch块由程序员决定是否让当前线程死亡（杀死线程：直接return;）</p>
<p>守护线程：线程分为用户线程和守护线程<br>
明面上创立的线程都是用户线程，当一个进程不包含任何一个存活的用户线程时，进程结束；<br>
守护线程是用来守护用户线程的，当最后一个用户线程结束时，所有守护线程自动死亡；<br>
设置守护线程,<br>
Thread t1 = new Thread(new MyRunnable( ));<br>
t1.setDaemon(true); //设置t1为守护线程<br>
t1.start( );</p>
<p>线程安全1-同步代码块：在Java中所有的对象都可以当做锁，但必须注意只有当所有线程看同一把锁的时候才能达到线程安全<br>
private Object o = new Object( ); //堆中的对象，如果在栈（run( ))中声明，每个线程都会看自己的锁导致线程不安全<br>
synchronized(锁对象) { //虽然线程安全，但是由于多个线程排队执行效率不高，这里的o就是锁<br>
//被锁保护的代码块，一个线程执行的时候处理相同对象的所有其他线程会等待<br>
}</p>
<p>线程安全2-同步方法：同步代码块作用范围可以细化到一行代码，而同步方法是以方法为单位加锁的<br>
public synchronized boolean sale( ) {<br>
//这个锁的锁对象是this<br>
//如果同一个对象有其他的方法也加了this锁（同一把锁)，那么该方法执行的时候当前方法会等待<br>
}<br>
public static synchronized boolean sale( ) {<br>
//这个锁的锁对象是当前类的class<br>
}</p>
<p>线程安全3-显式锁： 同步代码块和同步方法都是隐式锁JVM层面的锁；显式锁是API层面的锁，可以添加加锁时限<br>
private Lock l = new ReentrantLock( ); //非公平锁<br>
private Lock l = new ReentrantLock(true);  //公平锁<br>
l.lock( ); //加锁<br>
l.unlock( ); //解锁</p>
<p>公平锁：当解锁后线程按照排队的顺序进入执行，先来先到<br>
非公平锁：当解锁后线程随机抢占，同步代码块和同步方法一定是非公平锁，显示锁可以设置成公平锁<br>
线程死锁：当线程资源存在互斥性，两个都加锁的对象方法互相调用的时候，互相等待对方加锁方法执行完的时候会无限等待下去</p>
<p>生产者消费者模型：厨师服务员生产食物，在食物中加一个状态标志boolean true的时候可生产反之不可生产<br>
服务员方法和厨师方法分别监控状态标志，只有可行状态下才会执行，执行完毕后！！！</p>
<ol>
<li>改变状态标志符</li>
<li>this.notifyAll( ); 唤醒所有等待线程</li>
<li>this.wait( ); 当前线程进入等待</li>
</ol>
<p>线程的六种状态：<br>
NEW：尚未启动<br>
RUNNABLE：运行时，JVM中执行的<br>
BLOCKED：被阻塞（IO阻塞，锁)，结束后到RUNNABLE<br>
WAITING：无限期等待另一个线程执行特定操作，结束后到RUNNABLE<br>
TIMED_WAITING：计时等待，结束后到RUNNABLE<br>
TERMINATED：结束</p>
<p>Runnable 与 Callable的不同点：</p>
<ol>
<li>Runnable没有返回值;Callable可以返回执行结果</li>
<li>Callable接口的call( )允许抛出异常; Runnable的run( )不能抛出</li>
<li>Callalble接口支持返回执行结果，需要调用FutureTask.get( )，此方法会阻塞主进程的继续往下执行，如果不调用不会阻塞</li>
</ol>
<p>线程池的好处： 1. 降低资源消耗 2. 提高响应速度 3. 提高线程可管理性<br>
如果并发的线程数量很多，并且每个线程都是执行一个时间很短的任务就结束了，这样频繁创建线程就会大大降低系统的效率，因为频繁创建线程和销毁线程需要时间. 线程池就是一个容纳多个线程的容器，池中的线程可以反复使用，省去了频繁创建线程对象的操作，节省了大量的时间和资源</p>
<p>缓存线程池：对比ArrayList，ExecutorService service = Executors.newCachedThreadPool( );<br>
定长线程池：对比Array，ExecutorService service = Executors.newFixedThreadPool(2); //length=2<br>
单线程线程池：和创立一个线程的区别是执行完之后不会结束线程而是一定时间内等待新任务<br>
周期性任务定长线程池：1.定时执行，延迟设定时间后执行 2.周期执行，延迟设定时间后以周期时间为单位执行任务<br>
ScheduledExecutorService service = Executors.newScheduledThreadPool(2); //length=2<br>
service.schedule(Runnable任务类，延迟时间，单位);<br>
service.scheduleAtFixedRate(Runnable任务类，延迟时间，周期时间，单位);<br>
service.execute(Runnable任务类); //这是其他几个线程池的执行方式等同于t1.start(r);</p>
<p>Lambda表达式：<br>
Thread t = new Thread( ( 参数 ) -&gt; { //等同于实现Runnable内部的run( )方法<br>
//函数内部表达式<br>
} );</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://derekshao1225.github.io/post/hello-gridea/</id>
        <link href="https://derekshao1225.github.io/post/hello-gridea/">
        </link>
        <updated>2018-12-11T03:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>